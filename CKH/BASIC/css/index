<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>

    <!-- 반응형(responsive) -->
    <!-- 화면의 크기에 맞게 콘텐츠의 배치가 자동으로 조정한다  -->
    <!-- 스크롤이 생기지 않는다 -->
    <!-- 퍼센트를 많이 사용한다 -->

    <!-- 비반응형 -->
    <!-- 고정된 px값을 많이 사용한다 -->
    <!-- html element를 선택한다. 스타일 속성을 주기 위한 시작단계 -->
    <!-- element , class , id , children , direct children , ... -->
    <!-- element 선택지  -->

    <!-- html내에서 style태그로 style속성을 줄 수 있다. -->
    <!-- 속성을 주고하자는 element보다 위에 있어야한다 -->
    <!-- <style>
        h1 {
            font-weight: normal;
        }

        p {
            color: #888;
        }

        a {
            color: #000;
            text-decoration: one;
        }
    </style>


    <h1>Heading 1</h1>
    <p>photgraph..</p>
    <a href="">link</a> -->


    <!-- class 선택지 -->
    <!-- class로 html elment를 선택한다 -->
    <!-- <style>
        div {
            width: 100px;
            height: 200px;
            border: noner;
            display: inline-block;
        }

        /* .class 으로 선택한다 */

        .oragano {
            background-color: green;
        }

        .mozzarella {
            background-color: #fff;

        }

        .tomato-sauce {
            background-color: red;
        }
    </style>

    <div class="oragano"></div>
    <div class="mozzarella"></div>
    <div class="tomato-sauce"></div> -->

    <!-- <style>
        div {
            width: 100px;
            height: 100px;
        }
    
        .border {
            border: 1px dashed;
        }
    
        .red { background-color: red;}
    
    
        .rounded {
            border-radius: 10px;
    
        }
    </style> -->

    <!-- 띄어쓰기를 해서 클래스를 추가할수 있다 -->


    <!-- <div class="border">Div</div> -->

    <!-- <style>
    /* 클래스이름A+클래스이름B A와B클래스를 모두가진 element를 선택한다 */
    .a.b {
        border: 1px dashed;
        width: 100px;
        height: 100px;

    }

    .a {
        background-color: #888;
    }

    .b {
        border-radius: 50%;

    }

</style>

<div class="a b"></div> -->

    <!-- # id선택자 -->
    <!-- <style>
div{
    width: 100px;
    height: 100px;
    border: 1px dashed;

}
#foo{ 
    background-color: red;
}
#bar{
    background-color: blue;
    
}
/* 아이디+클래스 :아이디 와 클래스 모두 가진 element를 선택한다 */
/* id는 element당 하나씩만 가질수 있다 */
/* 다른 element가 같은 id를 가질수 없다 */

#bar.rounded{
    border-radius: 50%;

}
</style>

<diV id="foo" class="rounded">foo</diV>
<div id="bar" class="rounded">bar</div> -->
    <!-- #children : direct children 선택자 -->
    <!-- <style>
   div{
    기본값
    background-color: transparent;
   }
   .level1 {
        width: 200px;
        height: 200px;
        background-color: #ddd;

    }

    .level2 {
        width: 100px;
        height: 100px;
        /* border-radius: 10px; */
    }

    .level3 {
        width: 50px;
        height: 50px;
    }
/* children 선택자 */
/* parent children : parent + 띄어쓰기 + chlidren */
/* parent 아래의 모든 children(모든 element) */
    .level1 div {
        border: 1px dashed;
    }
/* parent > (gt) direct children : 바로 아래의 children을 선택한다 */
    /* .level1 >level2{
     border-radius: 10px;
    } */
.level > div{
    border-radius: 10px;
}
</style>
<div class="level1">
    <div class="level2">
        <div class="level3"></div>
    </div>


</div> -->


    <!-- 기타 -->
    <!-- <style>
/* classA , classB,... : 다른 클래스 이름에 같은 속성을 준다 */
#foo,#bar{
    border: 1px dashed;
    width: 100px;
    height: 100px;

 }
</style>

<div id="foo">foo</div>
<div id="bar">bar</div>
 -->

    <!-- <style>
    /* 전체선택자 ,universal selecter */
    * {
        text-align: center;
       /* text-align: left; */
        border: 1px dashed;
    }

    html,
    body {
        border: none;
    }
</style>

<h1>heading</h1>
<p>paragraph</p>
<small>small</small> -->
    <!-- #pseudo class 와 pseudo element(가치 클래스와 가치 엘리먼트) -->

    <!-- <style>
    button {
        padding: 10px;
        background-color: #888;
        color: #fff;
        border: none;
        cursor: pointer;
    }
    /* pseudo class */
    /* class 이름옆에 name의 형태로 작성한다 */
    /* element에 특별한 상태를 적용하기 위해 사용한다 */
    button:hover {
        background-color: #555;

    }
    input[type=text]:focus{
        outline: 5px solid red;
    }
</style>

<button>button</button>

<hr>

<input type="text"> -->

    <!-- <style>
    ul li {
        font-weight: normal;
    }
/* ul의 children중 첫번째 엘리먼트를 선택한다 */
    ul li:first-child {
        font-weight: bold;
    }
    ul li:nth-child(2){
      text-decoration: line-through;}
    /* ul의 children중 마지막 element를 선택한다 */
    ul li:last-child{
        font-style: italic;
    }
</style>


<h1>list</h1>
<ul>
    <li>item1</li>
    <li>item2</li>
    <li>item3</li>

</ul> -->

    <!-- #pseudo element -->
    <!-- <style>

.container{
    border: 1px dashed;
    width: 100px;
    height: 100px;
    display: inline-block;
}
/* parent::after: :pausdo element를 parent의 마지막 children뒤에 추가한다 */
.container::after{
    content: "square";
    background-color: #888;
}
span{
   background-color: red;
}

</style>
<div class="container">
    <span>@</span>
    <span>@</span>
</div>
<div class="container">
    <span>@</span>
    <span>@</span>
</div>
<div class="container">
    <span>@</span>
    <span>@</span>
</div>
<div class="container">
    <span>@</span>
    <span>@</span>
</div> -->

    <!-- #unit(css의 단위) -->
    <!-- 1absolute length(절대값) -->
    <!-- 예)px, cm,... -->
    <!-- 2 relative length(상대값)-->
    <!-- 예) rem ,em ,% ,vh ,vw... -->

    <!-- <style>
    .container{
        width: 100px;
        height: 100px;
        border: 1px dashed;  
    }
</style> -->
    <!-- <div class="container"></div> -->
    <!-- # Relative length(상대값)-->
    <!-- <style>
    .container {
        font-size: 16px;
    }

    h1 {
        border: 1px dashed;
        font-size: 2em;
        /* padding ,margin에서 1em = 현재 element의 font-size와 같다 */
        padding: 1em;
    }
    p {
        /* 1em =부모 element의 font-size */
        /* em = element */
        font-size: 1em;
    }
    small {
        font-size: 0.8em;
    }
</style>


<div class="container">

    <h1>Heading 1</h1>
    <p>Paragragh</p>
    <small>small</small>
</div> -->
    <!-- <style>
    /* 1rem(root element):브라우저의 기본 글자크기(16px) */
.container{
    font-size: 10px;
}
h1{
    font-size: 2rem;
    border: 1px dashed;
    padding: 1rem;
}
p{
    font-size: 1rem;
}
small{
    font-size: 0.8rem;
}

</style>

<div class="container">
    <h1>Heading 1</h1>
    <p>Paragragh</p>
    <small>small</small>
</div> -->

    <!-- <style>
    .contanier{
        background-color: #ddd;
        height: 200px;
    }
    .item{
       /* %: 부모태그 기준 */
        width: 100%;
        height: 100%;
        border: 1px dashed;
    }
</style>




<div class="contanier">
    <div class="item"></div>
</div> -->

    <!-- <style>
  .container{
        background-color: #ddd;
        /* viewport height */
        /* 100vh=디바이스 화면 높이의 100% */
        height: 100vh;
        /* viewport width */
        /* 100vw=디바이스 화면 넓이의 100% */
        width: 100vw;
    }
</style>

<div class="container"></div> -->

    <!-- font 속성 -->
    <!-- font-color, font-style , font-weight , font-size -->

    <!-- <style>
    .red {
        /* font-color */
        color: red;
    }

    .italic {
        /* italic , normal(기본값) , oblique */
        font-style: italic;
    }

    .bold {
        /* font-weight: 폰트의 굵기 */
        /* number:100,200,... , 700(bold)... */
        /* string :normal(기본값),bold,... */
        font-weight: 700;
    }
.light{
    font-weight: 200;
}
.small{
    /* font의 크기 */
    /* string : small ,large, normal */
    /* css의 unit ,px ,rem ... */
    font-size:small;
}

.x-large{
    font-size: 2rem;
}
</style>


<p class="red">paragtaph</p>
<p class="italic">paragtaph</p>
<p class="bold">paragtaph</p>
<p class="light">paragtaph</p>
<p class="small">paragtaph</p>
<p class="x-large">paragtaph</p> -->

    <!-- text 속성 -->
    <!-- text-align ,  text alignment, text-shadow , text spacing , text-transform -->


    <!-- <style>

.text-start{
    /* text-align: text의 중력 */
    /* left(기본값) ,center ,right */
    text-align: left;
}
.text-center{
    text-align: center;
}
.text-end{
    text-align: right;
}   
.text-shadow{
    
    /* text-shadow : text의 그림자효과 */
    /* text-shadow: 오른쪽 아래(필수) 아래(필수) 위 왼쪽 color */
    text-shadow: 2px 2px #ddd;
}
.text-distant{
    /* 글자 사이의 간격 */
    letter-spacing: 10px;
}
.uppercase{
 /* 대문자로 바꾼다 */
    text-transform: uppercase;
}

.capitailze{
    /* 앞글자를 대문자로 바꾼다 */
    text-transform: capitalize;
}
.leading-relexed{
    /* 문장의 수직간격 */
    line-height: 2rem;
}
.leading-none{
    
    line-height: normal;
}
</style>



<p class="text-start">paragraph</p>
<p class="text-center">paragraph</p>
<p class="text-end">paragraph</p>
<p class="text-shadow">paragraph</p>
<p class="text-distant">paragraph</p>
<p class="uppercase">paragraph</p>
<p class="capitailze">paragraph</p>
<p class="leading-none">Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor recusandae voluptate repellendus odit quibusdam pariatur porro consequuntur fugit officia fugiat sequi, iusto ad, sed quaerat obcaecati. Aspernatur quisquam eaque suscipit.</p>
<p class="leading-relexed">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Qui quae laborum doloremque nostrum ullam quasi a dignissimos inventore explicabo voluptatum consectetur illo, veritatis vero, aperiam eaque exercitationem, totam recusandae dolor.
</p> -->

    <!-- # border -->
    <!-- border-width , border-style , border-color , diraction , shorthand -->
    <!-- <style>
    div {
        width: 100px;
        height: 100px;
        border-width: 1px;
        border-style: dashed;
        border-color: #000;
        display: inline-block;
        vertical-align: middle;
    }

    .border-8 {
        border-width: 8px;
    }
    .border-x-8{
        /* x:오른쪽, 왼쪽 */
        border-left-width: 8px;
        border-right-width: 8px;
    }
    .border-dotted{
        border-width: 8px;
        border-style: dotted;
    }
    .border-solid{
        border-style:solid ;
    }
    .border-red{
        border-color: red;
    }
    .border-b-8{
        /* border-diretion */
        /* border-top */
        /* border-bottom */
        /* border right */
        /* border-left */
        border-bottom-width:8px ;
    }
    .border-top{
        shorthead(간단히 쓰기)
        /* border width style color */
        /* direction이 없으면 전체에 적용된다(top , left , right ,bottom) */
        border-top: 8px solid #bbb;
}
.border{
    /* shorthead */
    border: 1px solid #000;
}
</style>

<div class="border-8">border-8</div>
<div class="border-x-8">border-x-8</div>
<div class="border-dotted">border-style: dotted</div>
<div class="border-solid">border-style: solid</div>
<div class="border-red">border-color: red</div>
<div class="border-b-8"></div>
<div class="border-top"></div>
<div class="border"></div> -->
    <!-- # css color -->
    <!-- color의 속성을 저장하는 방법 : name, rgb, rgba, hex, hs1... -->
    <!-- <style>
    div {
        height: 100px;
        border: 1px solid;
    }

    .red {
        /* color: name으로 지정 */
        background-color: darkred;
    }

    .rgb-red {
        /* rgb(red,green,blue) */
        /* 0~255 */
        background-color: rgb(255, 0, 0);
    }

    .rgba-red {
        /* rgba(red,green,blue,alpha(opacity) */
        /* opacity o (완전투명) -1(완전불투명) */
        background-color: rgba(255, 0, 0, 0.5);
    }

    .hex-red {
        /* hex (hexadcimal)16진법으로 컬러 표시 */
        /* #rrggbb */
        background-color: #ff0000;
    }

    .hex-short-red {

        /* #rrggbb에서rr이 같고 gg가 같고 bb가 같을때 3자리로 사용할수있다 */
        background-color: #f00;
    }

    .her-transparent-red {
        /* background-color: #33ff0000; */
    }
</style>

<div class="red"></div>
<div class="rgb-red"></div>
<div class="rgba-red"></div>
<div class="hex-red"></div>
<div class="hex-short-red"></div>
<div class="hex-transparent-red"></div>
<div></div> -->

    <!--# padding -->
    <!-- element의 내부에 공간을 만든다  -->
    <!-- <style>
    div {
        width: 100px;
        height: 100px;
        border: 1px dashed;
        display: inline-block;
        vertical-align: middle;
    }

    .p-2 {
        padding: 0.5rem;
    }

    .px-2 {
        padding-left: 0.5rem;
        padding-right: 0.5rem;
    }

    .py-2 {
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
    }

    .pl-2 {
        padding-left: 0.5rem;
    }

    .pr-2 {
        padding-right: 0.5rem;
    }

    .pt-2 {
        padding-top: 0.5rem;
    }

    .pb-2 {
        padding-bottom: 0.5rem;
    }

    .px-shorthand-2 {
        /* 두가지 값을 적용하는 경우 */
        /* top/bottom left/right */
        padding: 0 0.5rem;
    }

    .py-shorthand-2 {
        padding: 0.5rem 0;
    }

    .pl-shotehand-2 {
        /* 4가지 값을 적용하는 경우 */
        /* top right bottom left */
        padding: 0 0 0 0.5rem;
    }

    .pr-shorthand-2 {
        padding: 0 0.5rem 0 0;
    }
</style>





<div class="p-2"></div>
<div class="px-2"></div>
<div class="py-2"></div>
<div class="pl-2"></div>
<div class="pr-2"></div>
<div class="pt-2"></div>
<div class="pb-2"></div>

<div class="px-shorthand-2">padding 0 0.5rem</div>
<div class="py-shorthand-2">padding 0.5rem 0</div>
<div class="pl-shorthand-2">padding 0 0 0 0.5rem</div>
<div class="prshorthand-2">padding 0 0.5rem 0 0</div>

<div class="px-2 py-2">px-2 py-2</div>
<div class="px-shorthand-2 py-shorthand-2">px-shorthand-2 py-shorthand-2</div>
<div class="" style="padding: 0.5rem 0 0">padding 0.5 0 0 </div> -->

    <!-- # margin -->
    <!-- element의 외부의 공간 -->
    <!-- element의 여백을 줄때 사용한디 -->

    <!-- <style>
div{
    width: 100px;
    height: 200px;
    border: 1px dashed;
    display: inline-block;
    vertical-align: middle;
}

.m-2{
    margin: 0.5rem;
}

.ml-2{
    margin-left: 0.5rem0;
}

.my-2{
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;

}

</style>

<div class="m-2"></div>
<div class="ml-2"></div>
<div class="my-2"></div> -->


    <!-- <style>
div{
    display: inline-block;
    border: 1px dashed;
    width: 100px;
    height: 100px;
}
/* 좌우의 margin은 합쳐진다 */
.mr-2{
    margin-right: 0.5rem;
}
.ml-2{
    margin-left: 0.5rem;
}
</style>

<div class="mr-2"></div><div class="ml-2"></div> -->

    <!-- <style>
    div {
        border: 1px dashed;
        width: 100px;
        height: 100px;
    }
    /* margin-collapsd:상하의 겹치는 부분이 제거된다 */
    .mb-2 {
        margin-bottom: 0.5rem;
    }

    .mt-2 {
        margin-top: 0.5rem;
    }
</style>

<div class="mb-2"></div>
<div class="mt-2"></div> -->

    <!-- <style>
    /* margin negative(음수값) */
    /* direction과 반대로 margin이 적용된다 */
    div {
        width: 100px;
        height: 100px;
        border: 1px dashed;
        margin-top: -50px;
        margin-left: -50px;
    }

</style>

<div></div> -->
    <!-- # box-sizing -->
    <!-- box-sizing ,conent-box ,border-box -->


    <!-- <style>
    div {
        width: 100px;
        height: 100px;
        border: 1px dashed;
        display: inline-block;
        padding: 10px;
    }

    .comtent-box {
        /* 기본값 */
        box-sizing: content-box;
    }

    .border-box {
       /* 기본값보다 더 기본값처럼 사용된다 */
       /* border와 padding을 주어진 width와 height안으로 적용된다 */
        box-sizing: border-box;
    }
</style>

<div class=""></div>
<div class="content-box"></div>
<div class="border-box"></div> -->



    <!-- # display -->
    <!-- display: block, inlind-block, inline ,... -->

    <!-- <style>
    hr{
        margin: 0;
    }
    span, button, div {
        border: 1px dashed;
        padding: 10px;
        margin: 10px;
    }

    button {
       /* 필요한 만큼만 넓이를 차지한다 */
        display: inline-block;
    }

    div {
        /* 부모 element의 넓이를 모두 차지한다 */
        display: block;
    }

    span {
        /* 필요한 만큼만 넓이를 차지한다 */
        /* 위 ,아래 margin과 padding이 적용되지 않는다 */
        /* 주로 text에서 사용한다 */
        /* 대표적인 element: span anchor(a태그)... */
        display: inline;
    }
</style>

<button>Button</button>
<button>Button</button>

<hr>

<div>Div</div>
<div>Div</div>

<hr>

<span>Span</span>
<span>Span</span> -->

    <!-- <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse sequi cupiditate architecto, <span style="font-weight: bold;"> ut aspernatur </span> perspiciatis itaque doloribus molestiae suscipit distinctio, nulla earum nisi, laudantium mollitia quo eligendi rem necessitatibus.</p> -->

    <!-- # display: none -->




    <!-- <style> 
.container div{
    width: 100px;
    height: 100px;
    border: 1px dashed;
}

.default{}
.block{
    display: block;
}
.none{
    /* 화면상에서 보이지 않는다 */
    /* 공간을 차지하지 않는다 */
    display: none;
}

</style>


<div class="container">
    <div class="default">default</div>
    <div class="none">none</div>
    <div class="block">block</div>
</div> -->

    <!-- #  vertial align -->
    <!-- inline-block 의 수직 정렬에 관한 속성 -->


    <!-- <style>
    .container {
        background-color: #ddd;
        height: 200px;
    }

    .item {
        width: 100px;
        height: 100px;
        border: 1px dashed;
        display: inline-block;
        /* element가 높이가 높은 item의 하단(baseline)을 기본으로 수직 정렬 한다  */
        /* vertical-align:baseline */
        /* vertical-align: top */
        /* item의 가운데의 line 를 기준으로 정렬한다 */
        vertical-align: middle;
    }

    .item:nth-child(2) {
        height: 150px;
    }

    .item:last-child {
        height: 50px;
    }
</style>



<div class="container">
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
</div> -->



    <!-- # white-space -->
    <!-- element의 white-space(공백)을 어떻게 처리할 것인가 -->

    <!-- <style>
    div {
        border: 1px dashed;
        height: auto;
        width: auto;
    }

    .normal {
        /* 기본값 */
        /* element안의 content가 감싸진다(wrap) */
        white-space: normal;
    }

    .nowrap {
        /* element안에 content가 감싸지지 않는다(nowrap) */
        white-space: nowrap;
    }

    .pre-line {
        /* element안에content가 필요할때 감싸진다(wrap) */
        /* \n(줄바꿈)을 반영한다 */
        white-space: pre-line;
    }
</style>

<div class="normal">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Et inventore culpa natus enim sunt
    voluptatem nesciunt repudiandae nihil, ratione consectetur perspiciatis in facere minima eius explicabo minus
    provident consequatur dicta?</div>

<br>

<div class="nowrap">Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur impedit voluptatum officiis in
    ea commodi quasi veniam? Doloribus mollitia ea, suscipit ipsum cum iusto quae, temporibus rem consequuntur saepe
    earum?</div>

<br>

<div class="pre-line">Lorem ipsum dolor, sit amet consectetur adipisicing elit.
    Dolore hic beatae dicta itaque,
    quos officia provident ducimus maiores natus nostrum accusamus dolores magnam in eius numquam ipsam alias vero
    neque?
</div> -->

    <!-- # visibility -->
    <!-- element의 가시성 -->


    <!-- <style>
    .contanier div {
        width: 100px;
        height: 100px;
        border: 1px dashed;
    }

    .hidden {
        /* 화면창에서 보이지 않는다 */
        /* element가 공간은 계속 차지하고 있다 */
        visibility: hidden;
    }

    .visible {
        /* 기본값 */
        /* element가 보이는 상태 */
        visibility: visible;
    }


</style>

<div class="contanier">
    <div class="default">default</div>
    <div class="hidden">hidden</div>
    <div class="visible">visible</div>
</div> -->

    <!-- # overflow -->
    <!-- element가 넘치는 content를 어떻게 처리할 것인가 -->



    <!-- <style>
    div {
        height: 100px;
        width: 100px;
        border: 1px dashed;
        display: inline-block;
        vertical-align: top;
        word-break: break-all;
    }

    .hidden {
        /* 넘치는 부분을 숨긴다 */
        overflow: hidden;
    }

    .scroll { 
        /* x축과 y축을 모두 스크롤을 만든다 */
        overflow: scroll;
    }

    .auto {
        /* x축과 y축 중 넘치는 부분만 스크롤을 만든다 */
        overflow: auto;
    }

    .visible {
        /* 기본값 */
        /* 넘치는 부분을 보이게 한다 */
        overflow: visible;
    }
</style>

<div class="hidden">
    Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti facilis alias repellat. Expedita dicta, quaerat
    assumenda esse aut numquam laboriosam molestias sunt molestiae nostrum aperiam facere ducimus, cupiditate debitis
    cum!
</div>
<div class="scroll">
    Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti facilis alias repellat. Expedita dicta, quaerat
    assumenda esse aut numquam laboriosam molestias sunt molestiae nostrum aperiam facere ducimus, cupiditate debitis
    cum!
</div>
<div class="auto">
    Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti facilis alias repellat. Expedita dicta, quaerat
    assumenda esse aut numquam laboriosam molestias sunt molestiae nostrum aperiam facere ducimus, cupiditate debitis
    cum!
</div>
<div class="visible">
    Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti facilis alias repellat. Expedita dicta, quaerat
    assumenda esse aut numquam laboriosam molestias sunt molestiae nostrum aperiam facere ducimus, cupiditate debitis
    cum!
</div> -->


    <!-- # width -->

    <!-- <style>
    div {
        border: 1px dashed;
        overflow: auto;
    }

    .default {
        width: auto;
    }

    .max-width {
        max-width: 600px;
    }

    .min-width {
        min-width: 600px;
    }
</style>



<div class="default">Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quo natus obcaecati, modi quos alias quia
    aliquid fugiat, odit doloremque ex nostrum hic fugit? Aliquid consequatur vitae ratione odit, commodi quis.
</div>


<div class="max-width">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab quibusdam labore iusto ea,
    reprehenderit iste beatae blanditiis facere dolores praesentium voluptas laudantium inventore aliquid necessitatibus
    laboriosam, molestiae molestias officiis ipsam!
</div>


<div class="min-width">Lorem ipsum dolor sit amet consectetur adipisicing elit. Ab accusantium aspernatur sunt
    consequuntur, laudantium sequi, praesentium vero id laborum corrupti nostrum nihil hic ad fuga accusamus tenetur
    modi reiciendis sed.
</div> -->

    <!-- # height -->

    <!-- <style>
    div {
        border: 1px dashed;
    }

    .default {
        /* height가 컨텐츠의 높이에 맞게 적용된다 */
        height: auto;
    }

    .min-height {
        min-height: 50px;
    }

    .max-height {
        max-height: 50px;
    }
</style>

<div class="default">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quas vitae nesciunt odio accusantium quod
    suscipit officia dolorem pariatur, provident, natus, aperiam officiis minus? Voluptates ipsum hic ducimus incidunt,
    quis dolor?Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quas vitae nesciunt odio accusantium quod
    suscipit officia dolorem pariatur, provident, natus, aperiam officiis minus? Voluptates ipsum hic ducimus incidunt,
    quis dolor?
</div>

<div class="min-height">Lorem ipsum dolor sit amet consectetur adipisicing elit. Ab accusantium aspernatur sunt
    consequuntur, laudantium sequi, praesentium vero id laborum corrupti nostrum nihil hic ad fuga accusamus tenetur
    modi reiciendis sed.Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quas vitae nesciunt odio accusantium
    quod suscipit officia dolorem pariatur, provident, natus, aperiam officiis minus? Voluptates ipsum hic ducimus
    incidunt, quis dolor?
</div>

<div class="max-height">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab quibusdam labore iusto ea,
    reprehenderit iste beatae blanditiis facere dolores praesentium voluptas laudantium inventore aliquid necessitatibus
    laboriosam, molestiae molestias officiis ipsam!Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quas vitae
    nesciunt odio accusantium quod suscipit officia dolorem pariatur, provident, natus, aperiam officiis minus?
    Voluptates ipsum hic ducimus incidunt, quis dolor?
</div> -->


    <!-- # position -->
    <!-- element를 어떻게 위치시킬것인가 -->
    <!-- static , relative ,adsolute ,fixed -->

    <!-- <style>
    diV {
        width: 100px;
        height: 100px;
        border: 1px dashed;
        /* 기본값 */
        /* element가 자연스러운 흐름에 따라 위치한다 */
        position: static;
    }
</style>


<div class="static"></div> -->

    <!-- <style>
    .relative {
        width: 200px;
        height: 200px;
        border: 1px dashed;
        position: relative;
    }

    .absolute {
        /* relative 부모 element를 기준으로 위치한다 */
        background-color: red;
        width: 20px;
        height: 20px;
        position: absolute;
    }

    .top-0 {
        top: 0
    }

    .right-0 {
        right: 0
    }

    .bottom-0 {
        bottom: 0
    }

    .left-0 {
        left: 0
    }
</style>

<div class="relative">
    <div class="absolute top-0 left-0"></div>
    <div class="absolute top-0 right-0"></div>
    <div class="absolute bottom-0 left-0"></div>
    <div class="absolute bottom-0 right-0"></div>

</div> -->
    <!-- <style>
    body {
        min-height: 1000px;
    }

    div {
        width: 100px;
        height: 100px;
        border: 1px dashed;
    }

    .fixed {
        /* viewport(디바이스화면)기준으로 유지한다 */
        position: fixed;

    }

    .top-0 {
        top: 0;
    }

    .bottom-0 {
        bottom: 0;
    }

    .left-0 {
        left: 0;
    }
</style>
<div class="fixed top-0 left-0"></div>
<div class="fixed bottom-0 left-0"></div> -->


    <!-- # transform -->
    <!-- element의 변형 -->
    <!-- translate(이동),scale(크기), rotate(회전), skew(비스듬하게) -->
    <!-- <style>
    .contanier {
        background-color: #ddd;
        width: 200px;
        height: 200px;
    }

    .item {
        width: 100px;
        height: 100px;
        border: 1px dashed;
    }

    .translate {
        /* translate(x,y) */
        /* item의 원래위치 기준으로 이동한다 */
        /* transform: translate(25px, 50px); */
        /* transform: translateX(25px); */
        /* transform: translateY(25px); */

        /* element 자신의 크기에 상대적이다 */
        transform: translateX(50%);
    }
</style>

<div class="contanier">
    <div class="item translate"></div>
</div> -->

    <!-- <style>
    .contanier {
        width: 200px;
        height: 200px;
        background-color: #ddd;
        position: relative;
    }

   .absolute{
    width: 50px;
    height: 50px;
    border: 1px dashed;
    position: absolute;
    /* 부모태그 기준 */
    top: 50%;
    left: 50%;
    /* 자신 element의 크기 기준 */
    /* -값은 x축은 왼쪽으로 y축은 오른쪽으로 움직인다 */
    transform: translate(-50% -50%);
   }
</style>

<div class="contanier">
    <div class="absolute"></div>
</div> -->


    <!-- <style>
    div {
        width: 100px;
        height: 100px;
        border: 1px dashed;
    }

    .scale {
        /* 10%커진다 */
        /* transform: scale(1.1, 1.1); */
        /* transform: scaleX(1.1) */
        transform: scaleY(1.1)
    }
</style>

<div class="scale"></div> -->


    <!-- <style>
 div {
        width: 100px;
        height: 100px;
        border: 1px dashed;
    }
    .rotate{
        transform: rotate(45deg);
    }
</style>

<div class="rotate"></div> -->

    <!-- <style>
    div {
        width: 300px;
        height: 100px;
        border: 1px solid #000;
    }

    .skew {
        /* skew(x,y) */
        /* transform: skew(20deg ,10deg); */
        /* transform: skewX(20deg); */
        /* transform: skewY(20deg); */
    }
</style>

<div class="skew"></div> -->

    <!-- <style>
    .contanier {
        width: 400px;
        height: 300px;
        border: 1px dashed;
        position: relative;
    }

    .left {
        background-color: green;
        width: 40%;
        height: 100%;
        display: inline-block;
    }

    .right {
        background-color: red;
        width: 60%;
        height: 100%;
        display: inline-block;
    }

    .round {
        width: 150px;
        height: 150px;
        border: 10px solid gold;
        border-radius: 50%;
        position: absolute;
        top: 50%;
        left: 19%;
        transform: translatey(-50%);
    }
</style>

<div class="contanier">
    <div class="left"></div><div class="right"></div>
    <div class="round"></div>
</div> -->


    <!-- # float(layout) -->

    <!-- <style>
.left, .right{
    width: 100px;
    height: 100px;
    border: 1px dashed;
}
.left{
    float: left;
}
.right{
    float: right;
}

 </style>

<div class="container">
    <div class="left">image</div>
    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. A, in labore unde quod aspernatur rerum voluptate facilis saepe voluptatum nisi soluta enim quaerat, similique doloribus dignissimos ipsum! Minima, dolorem ipsa?</p>
</div>

<hr>

<div class="container">
    <div class="right">image</div>
    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. A, in labore unde quod aspernatur rerum voluptate facilis saepe voluptatum nisi soluta enim quaerat, similique doloribus dignissimos ipsum! Minima, dolorem ipsa?</p>
</div> -->

    <!-- <style>
    .contanier{
        background-color: #ddd;
    }
    .contanier div{
        width: 100px;
        height: 100px;
        border: 1px dashed;
        width: 33.33333%;
        /* border와padding에 주어진 width 안으로 적용된다 */
        box-sizing: border-box;
    }
    .left{
        float: left;
    }
</style>
<div class="contanier">
    <div class="left"></div>
    <div class="left"></div>
    <div class="left"></div>
</div> -->

    <!-- <style>
    .float-contanier .left {
        width: 100px;
        height: 100px;
        border: 1px dashed;
    }
    /* clearfix: float-contanier을 clearfix라는 이름으로 쓰기도 한다 */
    .float-contanier::after{
        content: "";
        display: block;
        clear: left;
    }
    .left {
        float: left;
    }

    /* .clear {
        clear: left;
    } */
</style>
<div class="contanier">
    <h1>Heading 1</h1>
    <div class="float-contanier">
        <div class="left"></div>
        <div class="left"></div>
        <div class="clear"></div>
    </div>
</div>

<div class="contanier">
    <h1>Heading 1</h1>
    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse eveniet obcaecati laboriosam eaque sed, vel
        accusamus consequuntur incidunt ut beatae assumenda repellendus, laborum labore dignissimos aliquam minus iste
        eum nulla!</p>
</div> -->

    <!-- # Flex -->

    <!-- flex-contanier 속성 -->

    <!-- 1 flex-direction: flexible item의 방향 -->
    <!-- row(기본값)/ row-reverse /colum /colum-reverse -->

    <!-- 2 flex-wrap:flexable item을 wrap(감쌀 것인지) or not
nowrap(기본값)/ wrap/ wrap-reverse

3 justify-content:flexible item의 수평 정렬
flex-start(기본값)/ flex-end /center /space-between /space-around/space-evenly

4 align-items : flexable item의 수직 정렬
stretch(기본값)/center/flex-start/flex-end/baseline


flex-item 속성

1 order: flexable item의 순서
0(기본값)/number

2 flex-grow: flexable item의 넓이를 증가시키는것
0(기본값)/number

3 flex-shrink:flexable item의 넓이를 감소시키는것
1(기본값)/number

4 flex-basis: flexable item의 넓이
auto(기본값)/number

5 align-self:특정한 flexable item의 수직 정렬
auto(기본값)/ stretch / center / flex-start / flex-end / baseline -->

    <!-- <style>
    .flex{
        background-color: #ddd;
        display: flex;
    }
    .item{
        border: 1px dashed;
        height: 100px;
        width: 100px;
    }
    .flex-row{
        /* flex item을 횡방향으로 배열한다 */
        /* 기본값 */
        flex-direction: row;
    }
    .flex-col{
        /* flex item을 열방향으로 배열한다 */
        flex-direction: column;
    }
</style>

<div class="flex flex-row">
    <div class="item">1</div>
    <div class="item">2</div>
    <div class="item">3</div>
</div>

<hr>

<div class="flex flex-col">
    <div class="item">1</div>
    <div class="item">2</div>
    <div class="item">3</div>
</div> -->

    <!-- flex-wrap -->

    <!-- <style>
.flex{
    display: flex;
    background-color: #ddd;
}
.item{
    border: 1px dashed;
    width: 200px;
    height: 100px;
}
.flex-wrap{
    /* flex contanier: flex item을 감싼다 */
    flex-wrap: wrap;
}
.flex-nowrap{
    /* 기본값 */
    /* flex contanier: flex item을 감싸지 않는다 */
    flex-wrap: nowrap;
}
</style>

<div class="flex flex-wrap">
    <div class="item">1</div>
    <div class="item">2</div>
    <div class="item">3</div>
</div>

<hr>

<div class="flex flex-nowrap">
    <div class="item">1</div>
    <div class="item">2</div>
    <div class="item">3</div>
</div> -->

    <!-- justify-content -->

    <!-- <style>
.flex{
    display: flex;
    background-color: #ddd;
}
.item{
    width: 100px;
    height: 100px;
    border: 1px dashed;
}
.justify-start{
    /* 기본값 */
    /* flexable item이 왼쪽에서 부터 정렬한다 */
    justify-content: flex-start;
}
.justify-center{
    justify-content: center;
}
.justify-between{
    /* flexable item 사이에 같은 크기의 공간이 생긴다 */
    justify-content: space-between;
}
</style>

<div class="flex justify-start">
    <div class="item">1</div>
    <div class="item">2</div>
    <div class="item">3</div>
</div> 

<hr>

<div class="flex justify-center">
    <div class="item">1</div>
    <div class="item">2</div>
    <div class="item">3</div>
</div> 


<hr>

<div class="flex justify-between">
    <div class="item">1</div>
    <div class="item">2</div>
    <div class="item">3</div>
</div>  -->

    <!-- align-items -->

    <!-- <style>
.flex{
    display: flex;
    background-color: #ddd;
    height: 100px;
}
.item{
    width: 50px;
    border: 1px dashed;
    height: auto;
}
.align-stretch{
    /* 기본값 */
    /* flex contanier의 높이를 다 차지한다 */
    align-items: stretch;
}
.align-baseline{
    /* item의 컨텐츠에 필요한 만큼만 차지한다 */
    align-items:baseline;
}
.align-center{
    /* flex contanier의 수직에서 가운데에 위치한다 */
    align-items: center;
}

</style>
<div class="flex align-stretch">
    <div class="item">1</div>
    <div class="item">2</div>
    <div class="item">3</div>
</div> 

<hr>

<div class="flex align-baseline">
    <div class="item">1</div>
    <div class="item">2</div>
    <div class="item">3</div>
</div> 

<hr>

<div class="flex align-center">
    <div class="item">1</div>
    <div class="item">2</div>
    <div class="item">3</div>
</div>  -->

    <!-- flex item 속성 -->
    <!-- flex order -->

    <!-- <style>
.flex{
    background-color: #ddd;
    display: flex;
}
.item{
    width: 50px;
    height: 50px;
    border: 1px dashed;
}
.item:first-child{
    /* flex item의 contanier내에서의 순서 */
    order: 2;
}
.item:first-child{
    order: 1;
}
</style>

<div class="flex">
    <div class="item">1</div>
    <div class="item">2</div>
</div> -->

    <!-- flex-grow -->
    <!-- <style>
.flex{
    background-color: #ddd;
    display: flex;
}
.item{
    width: 100px;
    height: 100px;
    border: 1px dashed;
    /* 기본값  */
    flex-grow: 0;
}
.item:nth-child(2){
    /* flex item이 contanier의 남는 공간을 다 차지한다 */
    flex-grow: 1;
}
</style>

<div class="flex">
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
</div>  -->
    <!-- <style>
    .flex {
        background-color: #ddd;
        display: flex;
    }

    .item {
        width: 100px;
        height: 100px;
        border: 1px dashed;
        /* flex contanier를 똑같은 넓이로 나누어 감싼다 */
        flex-grow: 1;
    }

    .item:nth-child(2) {
        flex-grow: 2;
    }
</style>

<div class="flex">
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
</div> -->

    <!-- flex-shrink -->

    <!-- <style>
.flex{
    background-color: #ddd;
    display: flex;
}
.item{
    width: 200px;
    height: 100px;
    border: 1px dashed;
    /* 기본값 */
    flex-shrink: 1;
}
.item:nth-child(2){
    flex-shrink:0;
}
</style>

<div class="flex">
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
</div>  -->

    <!-- flex-basis -->

    <!-- <style>
    .flex{
        background-color: #ddd;
        display: flex;

    }
    .item{
        height: 100px;
        border: 1px dashed;
        /* flex item의 width */
        flex-basis: 33.3333%;
        /* width: 33.3333%; */
    }
</style>

<div class="flex">
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
</div>  -->

    <!-- <style>
    .flex{
        background-color: #ddd;
        display: flex;
        flex-wrap: wrap;
    }
    .item{
        height: 100px;
        border: 1px dashed;
        /* flex item의 width */
        flex-basis: 33.3333%;
        /* width: 33.3333%; */
        box-sizing: border-box;
    }
</style>

<div class="flex">
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
</div>  -->

    <!-- align self -->

    <!-- <style>
    .flex {
        background-color: #ddd;
        display: flex;
        align-items: center;
        height: 100px;
    }

    .item {
        width: 100px;
        border: 1px dashed;
    }
    .item:last-child{
        /* flex contanier의 align-items 속성에 덮어쓰기가 된다 */
        /* flex-end: flexable item에 contanier의 밑에 위치한다 */
        align-self: flex-end;
    }
</style>

<div class="flex">
    <div class="item">1</div>
    <div class="item">2</div>
    <div class="item">3</div>
    <div class="item">4</div>
</div> -->

    <!-- <style>
    .contanier {
        display: flex;
        background-color: #ddd;
        height: 300px;
        display: flex;
        justify-content: flex-start;
    }

    .item {
        display: flex;
        width: 100px;
        height: 100px;
        border: 1px dashed;
    }

    .item:first-child {
        align-self: auto;
    }

    .item:nth-child(2) {
        align-self: center;
    }

    .item:last-child {
        align-self: flex-end;
    }
</style>

<div class="contanier">
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
</div> -->

    <!-- <style>
    .flex {
        background-color: #ddd;
        height: 300px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .item {
        border: 1px dashed;
        height: 100px;
        width: 100px;
        display: flex;
        align-items: flex-start;
        justify-content: flex-end;
    }

    .dot {
        width: 10px;
        height: 10px;
        background-color: red;
    }
</style>

<div class="flex">
    <div class="item">
        <div class="dot"></div>
    </div>
</div> -->
    <!-- grid -->
    <!-- 격자형 배열 -->

    <!-- <style>
        .grid {
            background-color: #ddd;
            display: grid;
            /* fr(fraction, 분수) */
            /* minmax(최소, 최대) */
            grid-template-columns: repeat(4, minmax(0, 1fr));
            gap: 1rem;
        }

        .item {
            border: 1px dashed;
            padding: 1rem;
            text-align: center;
        }
    </style>

    <div class="grid">
        <div class="item">1</div>
        <div class="item">2</div>
        <div class="item">3</div>
        <div class="item">4</div>
        <div class="item">5</div>
        <div class="item">6</div>
        <div class="item">7</div>
        <div class="item">8</div>
        <div class="item">9</div>
        <div class="item">10</div>
        <div class="item">11</div>
        <div class="item">12</div>
    </div> -->
    <!-- <style>
        .contanier {
            width: 100%;
            height: auto;
            border: 1px dashed;
        }
        .item{
            padding-top: 100%;
        }
    </style>
    <div class="contanier">
        <div class="item"></div>
    </div> -->

    <!-- <style>
        .grid {
            background-color: #ddd;
            display: grid;
            /* fr(fraction, 분수) */
            /* minmax(최소, 최대) */
            grid-template-columns: repeat(3, minmax(0, 1fr));
            gap: 1rem;
        }

        .item {
            border: 1px dashed;
            height: auto;
        }
        .pt{
            content: "";
            /* padding-top을 100%로 하면 부모  element의 width가 상대적이다 */
            padding: 100% 0 0;
        }
    </style>

    <div class="grid">
        <div class="item">
            <div class="pt"></div>
        </div>
        <div class="item">
            <div class="pt"></div>
        </div>
        <div class="item">
            <div class="pt"></div>
        </div>
        <div class="item">
            <div class="pt"></div>
        </div>
        <div class="item">
            <div class="pt"></div>
        </div>
        <div class="item">
            <div class="pt"></div>
        </div>
        <div class="item">
            <div class="pt"></div>
        </div>
        <div class="item">
            <div class="pt"></div>
        </div>
        <div class="item">
            <div class="pt"></div>
        </div>
        <div class="item">
            <div class="pt"></div>
        </div>
        <div class="item">
            <div class="pt"></div>
        </div>
        <div class="item">
            <div class="pt"></div>
        </div>
     
    </div> -->

    <!-- @media keyword -->
    <!-- 반응형 제작  -->

    <!-- <style>
        /* mobile first */
        .title::after{
            content: "Extra small devices";
        }
        p {
            color: #888;

        }
        
        /* 예외 */
        @media(min-width: 640px;){
            .title::after{
                content: "small devices";
            }
        }
        @media(min-width: 768px;){
            .title::after{
                content: "Medium devices";
            }
        }
        @media(min-width: 1024px;){
            .title::after{
                content: "Large devices";
            }
        }
        @media(min-width: 1280px;){
            .title::after{
                content: "Extra large devices";
            }
        }
        @media(min-width: 1536px;){
            .title::after{
                content: "2 Extra large devices";
            }
        }
            
        
    </style>

    <div class="contanier">
  <h1 class="title"></h1>
  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Repellendus quae, voluptatibus quos numquam culpa error. Qui, libero dolorem asperiores, voluptatum tempora hic dolore nisi expedita nemo incidunt, unde perferendis ipsam?</p>
</div> -->

<!-- image: img tmg 또는 background-image 속성 -->

<!-- <style>

    .contanier{
        width: 100px;
        height: 100px;
        border: 1px dashed;
        border-radius: 50%;
        overflow: hidden;
    }
    img{
        width: 100px;
        height: 100px;
        /* 이미지의 비율을 자동으로 조정한다 */
        object-fit: cover;
    }
</style>

<div class="contanier">
    <img src="../../img/스타리아.jpg" alt="">
</div> -->


<!-- <style>
    .contanier{
        width: 100px;
        height: 100px;
        display: inline-block;
        border: 1px dashed;
    }
    .bg-light-gray{
        background-color: #ddd;
    }
    .bg-gradient-to-r{
        /* background-image속성에서 gradient효과를 적용할 수 있다+ */
        background-image: linear-gradient(to right, #333, #888);
    }
    .bg-image{
        /* element에 background에 이미지를 추가한다 */
        background-image: url(../../img/스타리아.jpg);
        /* 이미지의 크기를 element의 height에 맞춘다 */
        background-size: cover;
        background-position: center;
    }   
</style>

<div class="contanier bg-light-gray"></div>
<div class="contanier bg-gradient-to-r"></div>
<div class="contanier bg-image"></div> -->


</body>

</html>
